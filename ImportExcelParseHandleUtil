package com.biz.bbc.util;

import cn.wine.model.base.exception.GlobalExceptionType;
import cn.wine.model.base.util.AssertUtils;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.FileCopyUtils;
import org.springframework.util.StopWatch;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import javax.servlet.http.HttpServletRequest;
import javax.validation.constraints.NotNull;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * @ClassName ImportExcelParseHandleUtil
 * @Description 升级版 可惜只支持2013版本的xslx 谁要是像支持2003版的  请自己动手封装
 * @Author junqi.hu
 * @Date 17:20
 * @Version 1.0
 **/
public class ImportExcelParseHandleUtil<T> implements AutoCloseable {
    private static ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();
    protected Logger logger = LoggerFactory.getLogger(getClass());
    private File uploadFile;
    private String directory;
    private List<T> dataList;
    private StopWatch stopWatch = new StopWatch("导入excel并解析处理");
    private FileInputStream input;
    private XSSFWorkbook wb;

    public ImportExcelParseHandleUtil(@NotNull HttpServletRequest request, @NotNull String fileParamName, @NotNull String pathName) throws IOException {
        logger.info("开始接收上传文件....");
        stopWatch.start("上传文件");
        request.setCharacterEncoding("UTF-8");
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile file = multipartRequest.getFile(fileParamName);
        String realFileName = file.getOriginalFilename();
        // 获取路径
        String ctxPath = request.getSession().getServletContext().getRealPath("/") + pathName + "/";
        File dirPath = new File(ctxPath);
        if (!dirPath.exists()) {
            AssertUtils.isTrue(dirPath.mkdir(), GlobalExceptionType.PARAMETER_ERROR, "导入失败，磁盘无法创建文件夹");
        }
        directory = ctxPath + realFileName + "-" + System.currentTimeMillis();
        uploadFile = new File(directory);
        FileCopyUtils.copy(file.getBytes(), uploadFile);
        stopWatch.stop();
        logger.info("上传文件结束");
    }


    public ImportExcelParseHandleUtil parseExcel(@NotNull Map<String, String> fieldPair, @NotNull Class<T> target) throws IOException {
        logger.info("开始解析excel并处理....");
        stopWatch.start("开始解析excel并处理");

        try {
            input = new FileInputStream(directory); // 读取的文件路径
            wb = new XSSFWorkbook(new BufferedInputStream(input));
//            wb.close();
            JSONArray array = new JSONArray();
            for (int k = 0; k < wb.getNumberOfSheets(); k++) {
                Sheet sheet = wb.getSheetAt(k);
                System.out.println("工作薄" + sheet.getSheetName());
                // excel列名
                List<String> fields = new ArrayList<>();
                if (sheet.getLastRowNum() >= 1) {


                    Row row = sheet.getRow(0);

                    for (int j = 0; j <= row.getLastCellNum(); j++) {
                        if (row.getCell(j) != null && !StringUtils.isEmpty(row.getCell(j).toString())) {
                            fields.add(row.getCell(j).toString());
                        }
                    }
                    for (int i = 1; i <= sheet.getLastRowNum(); i++) {// 有多少行
                        row = sheet.getRow(i);

                        JSONObject object = new JSONObject();
                        for (int j = 0; j < fields.size(); j++) {
                            if (row.getCell(j) != null) {
                                String field = fieldPair.get(fields.get(j));
                                if (field == null) {
                                    throw new RuntimeException("映射表字段映射不完全 该字段 '" + fields.get(j) + "'未添加映射关系");
                                }
                                object.put(field, decimals(row.getCell(j).toString()));
                            }
                        }
                        int count = 0;
                        for (Object f :
                                object.values()) {
                            if (f == null || f.toString().trim().equals("")) {
                                count++;
                            }
                        }
                        if (object.size() != count) {
                            array.add(object);
                        }
                    }
                }
            }
            dataList = JSON.parseArray(array.toJSONString(), target);
        } catch (Exception e) {
            logger.error("excel解析出错", e);
            throw new RuntimeException("格式解析出错，请检查excel模板,只支持xlsx格式");
        }
        stopWatch.stop();
        logger.info("解析excel并处理结束");
        logger.info(stopWatch.prettyPrint());
        return this;
    }

    private static String decimals(String s) {
        if (s != null) {
            char[] cahrs = s.toCharArray();
            if (cahrs.length > 1) {
                if (cahrs[cahrs.length - 1] == '0' && cahrs[cahrs.length - 2] == '.') {
                    try {
                        Double.valueOf(s);
                        return s.substring(0, s.length() - 2);
                    } catch (NumberFormatException e) {
                    }
                }
            }
        }
        return s;
    }


    public ImportExcelParseHandleUtil handleData(ExcelDataHandle excelDataHandle) {
        excelDataHandle.handle(dataList);
        return this;
    }


    /**
     * 移除上传的文件
     */
    @Override
    public void close() throws IOException {
        if (wb != null) {
            wb.close();
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {

                }
            }
        } else {
            if (input != null) {
                input.close();
            }
        }
        logger.info("进行异步回收文件...");
        singleThreadExecutor.execute(new Runnable() {
            @Override
            public void run() {
                delDir(new File(directory));
            }
        });
    }

    private void delDir(File f) {
        if (stopWatch.isRunning()) {
            stopWatch.stop();
        }
        stopWatch.start("进行异步回收文件");
        // 判断是否是一个目录, 不是的话跳过, 直接删除; 如果是一个目录, 先将其内容清空.
        if (f.isDirectory()) {
            // 获取子文件/目录
            File[] subFiles = f.listFiles();
            if (subFiles != null) {
                // 遍历该目录
                for (File subFile : subFiles) {
                    // 递归调用删除该文件: 如果这是一个空目录或文件, 一次递归就可删除. 如果这是一个非空目录, 多次
                    // 递归清空其内容后再删除
                    delDir(subFile);
                }
            }
        }
        // 删除空目录或文件
        if (!f.delete()) {
            logger.error("删除文件失败 ，请检查文件:" + directory);
        }
        stopWatch.stop();
        logger.info("异步回收文件结束...");
        logger.info(stopWatch.prettyPrint());
    }

    public interface ExcelDataHandle<T> {

        void handle(List<T> list);

    }

}


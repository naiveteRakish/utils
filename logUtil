package com.biz.primus.ms.product.config;

import com.alibaba.fastjson.JSON;
import com.biz.primus.common.utils.JsonUtils;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;
import org.springframework.util.StopWatch;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

/**
 * 记录日志和性能
 *
 * @author junqi
 * @date 2018年01月09日
 */
@Aspect
@Component
@Profile("dev")
@Slf4j
public class AopAspect {

    //不考慮緩存維護問題 數據量不大
    private ConcurrentHashMap<String, MethodParam> concurrentHashMap = new ConcurrentHashMap<>();

    @Pointcut(value = " execution (* com.biz.primus.ms.product.api..*.*(..))")
    public void addLog() {

    }


    private MethodParam getMethod(String str, Class[] classes) {
        MethodParam methodParam = concurrentHashMap.get(str);
        if (methodParam == null) {
            return null;
        }
        if (methodParam.paramClass == null) {
            return methodParam;
        }
        if(classes==null){
            return methodParam;
        }
        if (classes.length != methodParam.paramClass.length) {
            return null;
        }
        for (int i = 0; i < classes.length; i++) {
            if (classes[i] != methodParam.paramClass[i]) {
                return null;
            }
        }
        return methodParam;
    }


    private void addMethod(String str, Class[] classes, Method method, io.swagger.annotations.ApiOperation annotation, LogIgnore logIgnore) {
        concurrentHashMap.put(str, new MethodParam(method, classes, annotation, logIgnore));
    }


    @Around(value = "com.biz.primus.ms.product.config.AopAspect.addLog()")
    public Object beforeDegraded(ProceedingJoinPoint jp) throws Throwable {
        String methodName = jp.getSignature().getName();
        Class classes = jp.getTarget().getClass();
        Class[] classes1 = null;
        List<Class> parames = null;
        if (jp.getArgs() != null) {
            parames =  Arrays.stream(jp.getArgs()).map(m -> m==null?null:m.getClass()).collect(Collectors.toList());
            classes1 = parames .toArray(new Class[parames.size()]);
        }

        io.swagger.annotations.ApiOperation annotation = null;
        LogIgnore logIgnore = null;

        //獲取緩存
        MethodParam methodParam = getMethod(methodName+parames, classes1);
        Method method = null;
        if (methodParam != null) {
            method = methodParam.method;
            annotation = methodParam.apiOperation;
            logIgnore = methodParam.logIgnore;
        }


        if (method == null) {
            //反射獲取
            try {
                method = classes.getDeclaredMethod(methodName, classes1);
            }catch (NoSuchMethodException e){
                return jp.proceed();
            }
            if(method!=null) {
                annotation = method.getAnnotation(io.swagger.annotations.ApiOperation.class);
                logIgnore = method.getAnnotation(LogIgnore.class);
                addMethod(methodName + parames, classes1, method, annotation, logIgnore);
            }
        }

        if (method == null || logIgnore != null || annotation == null) {
            //如果該方法是非公共方法或者該方法上有日志忽略注解或者該方法沒用swagger ApiOperation注解  就跳過之後的代碼
            return jp.proceed();
        }


        //接口進入打印日志
        StopWatch stopWatch = new StopWatch(annotation.value());
        log.info("Method=[" + methodName + "] " + annotation.value() + " > >>请求参数: {}", JsonUtils.obj2Json(jp.getArgs()));
        stopWatch.start(annotation.value());

        //執行方法
        Object o = jp.proceed();

        //方法返回值打印
        stopWatch.stop();
        log.info("Method=[" + methodName + "]  "+ annotation.value() +" > >>返回值:{}" , JSON.toJSONString(o) + "耗时 :" + stopWatch.getTotalTimeMillis());
        return o;

    }

    //緩存數據model
    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    class MethodParam {
        Method method;
        Class[] paramClass;
        io.swagger.annotations.ApiOperation apiOperation;
        LogIgnore logIgnore;
    }

    //日志打印忽略
    @interface LogIgnore {

    }
}

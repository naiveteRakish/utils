package com.biz.primus.base.session.util;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Base64;
import java.util.Objects;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
 
public class AES {
 
	private static SecretKeySpec secretKey;
	private static byte[] key;
	
	public static void setKey(String myKey) 
	{
		MessageDigest sha = null;
		try {
			key = myKey.getBytes("UTF-8");
			sha = MessageDigest.getInstance("SHA-1");
			key = sha.digest(key);
			key = Arrays.copyOf(key, 16); 
			secretKey = new SecretKeySpec(key, "AES");
		} 
		catch (Exception e) {
			throw new RuntimeException(e);
		} 
	}
 
	public static String encrypt(String strToEncrypt, String secret) 
	{
		try 
		{
			setKey(secret);
			Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
			cipher.init(Cipher.ENCRYPT_MODE, secretKey);
			return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
		} 
		catch (Exception e) 
		{
			throw new RuntimeException(e);
		}
	}
 
	public static String decrypt(String strToDecrypt, String secret) 
	{
		try 
		{
			setKey(secret);
			Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
			cipher.init(Cipher.DECRYPT_MODE, secretKey);
			return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
		} 
		catch (Exception e) 
		{

			throw new RuntimeException(e);
		}
	}
	  /**
     * 获取签名
     * @param content json
     * @return
     * @throws UnsupportedEncodingException 
     */
    public static String sign(String content) {
    	byte[] utf8byte;
		try {
			utf8byte = content.getBytes("UTF-8");
			utf8byte[utf8byte.length-1] = (byte) (utf8byte[utf8byte.length-1]^utf8byte[0]);
	    	utf8byte[0] = (byte) (utf8byte[0]^utf8byte[utf8byte.length-1]);
	    	utf8byte[utf8byte.length-1] = (byte) (utf8byte[utf8byte.length-1]^utf8byte[0]);
	    	for(int i = 0;i<utf8byte.length;i++){
	    		utf8byte[i]=(byte) ~utf8byte[i];
	    	}
	    	return MD5(new String(utf8byte,"UTF-8"));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
    	
    }
    
    /**
     * 验证签名
     * @param content json
     * @return
     * @throws UnsupportedEncodingException 
     */
    public static boolean verify(String content,String sign) {
    	return Objects.equals(sign(content), sign);
    	
    }
    
    /**
     * MD5 加密
     */
    private static String MD5(String str) {
        MessageDigest messageDigest = null;
 
        try {
            messageDigest = MessageDigest.getInstance("MD5");
 
            messageDigest.reset();
 
            messageDigest.update(str.getBytes("UTF-8"));
 
        } catch (Exception e) {
           throw new RuntimeException(e);
        } 
 
        byte[] byteArray = messageDigest.digest();
 
        StringBuffer md5StrBuff = new StringBuffer();
 
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1)
                md5StrBuff.append("0").append(
                        Integer.toHexString(0xFF & byteArray[i]));
            else
                md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
 
        return md5StrBuff.toString();
    }
	public static void main(String[] args) 
	{
		
		
		
		final String secretKey = "d1lyVTl6VhMa3AhWuO6rCF1ycKkq3hYFxQg+0sOGn9f7sgMRvp+";
		String originalString = "{'name':'xiaoming','age':45,'address':'四川'}";
		String sign = sign(originalString);
		String encryptedString = AES.encrypt(originalString, secretKey) ;
		String decryptedString = AES.decrypt(encryptedString, secretKey) ;
		if(verify(decryptedString, sign)){
			System.out.println("签名通过获得数据:"+decryptedString);
		}
		
		
		
	}
}
